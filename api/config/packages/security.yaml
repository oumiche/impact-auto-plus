security:
    password_hashers:
        App\Entity\User:
            algorithm: auto

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    # Hiérarchie des rôles - du plus élevé au moins élevé
    role_hierarchy:
        # Super Admin - Accès complet à tous les tenants et fonctionnalités
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_GESTIONNAIRE, ROLE_SECRETAIRE, ROLE_EXPERT, ROLE_REPARATEUR, ROLE_CONDUCTEUR, ROLE_VERIFICATEUR]
        
        # Admin - Gestion complète d'un tenant
        ROLE_ADMIN: [ROLE_GESTIONNAIRE, ROLE_SECRETAIRE, ROLE_EXPERT, ROLE_REPARATEUR, ROLE_CONDUCTEUR, ROLE_VERIFICATEUR]
        
        # Gestionnaire - Gestion des ressources et planning
        ROLE_GESTIONNAIRE: [ROLE_SECRETAIRE, ROLE_EXPERT, ROLE_REPARATEUR, ROLE_CONDUCTEUR, ROLE_VERIFICATEUR]
        
        # Secrétaire - Gestion administrative et documentation
        ROLE_SECRETAIRE: [ROLE_CONDUCTEUR, ROLE_VERIFICATEUR]
        
        # Expert - Analyse technique et expertise
        ROLE_EXPERT: [ROLE_REPARATEUR, ROLE_CONDUCTEUR, ROLE_VERIFICATEUR]
        
        # Réparateur - Maintenance et réparations
        ROLE_REPARATEUR: [ROLE_CONDUCTEUR, ROLE_VERIFICATEUR]
        
        # Conducteur - Utilisation des véhicules
        ROLE_CONDUCTEUR: [ROLE_VERIFICATEUR]
        
        # Vérificateur - Consultation et vérification uniquement
        ROLE_VERIFICATEUR: []

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        
        login:
            pattern: ^/api/login_check
            stateless: true
            security: false

        api:
            pattern: ^/api
            stateless: true
            jwt: ~

    access_control:
        # Accès public
        - { path: ^/api/login_check, roles: PUBLIC_ACCESS }
        
        # Routes d'administration - Super Admin uniquement
        - { path: ^/api/tenants/admin, roles: ROLE_ADMIN }
        
        # Routes de gestion des affectations - Admin et supérieurs
        - { path: ^/api/user-tenant-permissions/admin, roles: ROLE_ADMIN }
        
        # Routes de gestion - Admin et supérieurs
        - { path: ^/api/users/admin, roles: ROLE_ADMIN }
        - { path: ^/api/tenants/admin, roles: ROLE_ADMIN }
        - { path: ^/api/garages/admin, roles: ROLE_ADMIN }
        - { path: ^/api/supplies/admin, roles: ROLE_ADMIN }
        - { path: ^/api/vehicles/admin, roles: ROLE_ADMIN }
        
        # Routes de consultation - Tous les utilisateurs authentifiés
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
